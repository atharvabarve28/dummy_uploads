   6.  Exception Handling
         Error and unexpected situation are integral part of programming, It rarely happen that program are error free.
         It is the responsiblity of the programmer to identity all possible error and correct them.
          There are two type of error.
           1)Syntax Error :  Syntax error generated at compile time. It's generate when if programmer not follow rules of language.
               or if programmer has lack knowlege of programming. e.g. missing semicolon, spelling mistake, wrong syntax etc
            2) Logical Error : This error generated at runtime. It's Generate when if programmer doesnot understand problem.
                 As per user requirement output is not match, then we say logical error. Removal of logical errors is called debugging.
                 which should be done by programmer.
            Other than syntax and logical error some conditions are arises at runtime, is called Exceptions. Exception occures at runtime.
          
       Deals with Errors.
         Error is integral part of programming. we can't ingore them, but we have to deals with error.
            i) The program should return to stable state and allow the user to take further action.
            ii)  If the program has to be terminated, it should give the user time to save the all work before termination.
            
       Causes of Errors.
            i) User Input Error  :  These error occur in input values given to a program. these include invalid, out of range value, wrong datatype, 
                                                 invalid path, etc.
            ii) Device Errors  :   These error are related to hardware devices which the program use.  e.g. network problem, battary problem. printer fail.
                                                  USB jacks, etc.
            iii) Physical Limitation :  These error are caused due to limitations on available memory. stack space for recursion, limited connection 
                                                        bandwidth etc.
            iv) Code Error   : These errors are caused due to the code itself. These include violation of constraints, invalid method calls, illegal assignments
                                             undefine class, exceeding array limits, etc.
     
     28-09-2020
      *** Exception ****                                       
          An excepiton is an abnormal condition that arises in a code at run time. Exception is runtime error, java has an built 
           exception handling machanism. An Exception in java is an object that describes occurrence of  some exception or unexcepted condition
           during execution. It's encapsulate the information of error so that further action can be taken.
           
         Exception Classes.
           There are several predefine Exception classes defined in java.lang package.  
            Error : These classes are related to  internal errors and resource exhaustion during runtime.  The user has no control over such 
                          situation and hence there type cannot be handle by the program. The java runtime system takes default action.
            Exception :  The classes belonging to this hierarchy represent exceptions
                                  There are two types of exception 
                                     1)Checked Exception  (Compile time exception)
                                           Except for RuntimeException, error and their subclasses. all other Exception are called CheckedException.
                                           This exception generate at compile time. It mean that, it's Complusory check by user. It handle by user,  and 
                                           appropriate action.
                                             E.g  IOException, ClassNotFoundException,  InterruptedException,    CloneNotSupportedException,
                                                     SQLException,  NoSuchMethodException,  ReflectiveOperationException. FileNotFoundException
                              
                                       2) UncheckedException (Runtime Exception)
                                           Exception defined by Error and RuntimeException classes and their subclasses are known as UncheckedException.
                                           i.e This type exception doesnot complusory checked. Compile doesnot check. Such exception are either irrecoverable
                                            and program should not attempt to deal with them.
                                              e.g NullPointerException,  ArithmeticException,  ArrayIndexOutOfBoundsException,  NumberFormatException
                                                    illegalArgumentsException, SecurityException,  StringIndexOutOfBoundsException, UnsupportedOpeationException,
                                                    TypeNotPresentException, NegativeArraySizeException, IllegalThreadStateExcetion, etc.
                                                    
                     **** Exception Handling. ******.
                        The default  Exception handler provided by JVM  terminates your program abnormally. If you want prevent to abnormal  program
                        termination and perform some action before the program ends. then we must define our own Exception.
                           Exception handling done by 5 keywords.
                                 try,  catch,  throw, throws, finallay. 
                                
                                General Syntax
                                     try
                                       {
                                           // do something here that might cause an exception 
                                       }
                                     catch(Exceptiontype obj)
                                      {
                                          //handle that exception or take appropriate action.
                                      }
                                    finally
                                      {
                                         // finally block always executed, when exception yeu de nahitar nako yeu de... me run honar ch...
                                      }
                          
                 program statement that you want to monitor for exceptions are written in try block.  Exception occures within try block.
               An exception object created and throw immediately catch block followed by try block. Catch block match exception and take
               appropriate action.   if catch not handle exception then JVM will handel exception and program is terminated.
               //WAP to demonstrate of try catch block
               
               class try1
	         {
	            public static void main(String args[])
	              {
	       		     System.out.println("\n Hello Guys.. pls telll me if u not understand ...");
	       		       try
	       		        {
	       					  System.out.println(" Within try block");
	       					    int a=Integer.parseInt(args[0]);
	       					    int b=Integer.parseInt(args[1]);
	       					      int c=a/b;
	       					   System.out.println(" Ans is-->"+a+"/"+b+" ="+(a/b));
	       					    System.out.println(" this statement execute if there is no error");
	       				}
	       			 catch(ArithmeticException obj)
	       			  {
	       				   System.out.println(" Error aala re.."+obj);
	       			  }
	       		  System.out.println(" Ethun pudhe remaining code execute karel ");
	              }
               }
               
     ***  finally block ****          
       A try block can be followed by one or more catch blocks, and /or single a finally block.
       a finally block always or guaranteed to be executed whether exception occures or not.
       i.e  finally block mhanto, exception yeu de or nako yevu de, me run honar ch. 
       Since finally block is always executed, it can be used to specify any clean-up action, 
       e.g close connection, close files. release resources, freezed memory etc.
            When exception handle by JVM, and finally block is given, then finally block is executed, remaining code or part is not executed.
      
      //WAP to demonstrate of  finally block.      
            class try2
	      {
	         public static void main(String args[])
	           {
"	    		System.out.println("\n Hello Guys.. pls telll me if u not understand ...");
	    	      try
	    	       {
	    	 	     System.out.println(" Within try block");
	    		     int a=Integer.parseInt(args[0]);
	    			 int b=Integer.parseInt(args[1]);
	    			    int c=a/b;
	    			 System.out.println(" Ans is-->"+a+"/"+b+" ="+(a/b));
	    			 System.out.println(" this statement execute if there is no error");
	    		   }
	    	      catch(ArithmeticException obj)
	    		    {
	    			  System.out.println(" Error aala re.."+obj);
	    			}
	    		  finally
	    			{
	    			 System.out.println("\n Finally block always executed.. exception occure or not ?");
	      System.out.println("\n Finally block execute honar ch kunihi handle karu de.. exception yeu de or nako yevu de");
	    			}
	  		  System.out.println(" Ethun pudhe remaining code execute karel ");
	           }
  }
      
  **** Multiple Catch block *****
    One try block code may arise more than one excepton, In such case, the try block can have one or more catch block 
    with different-different exception types. each catch block handle different exception.
       multiple catch block work like switch. When an exception occurs, only one catch block is executed, and others are bypass.
       if none of catch blocks match, then JVM will handle that exception and program is terminated.
             To avoid this situation, we can define a generic handler which can be catch any type of exception.
              This is done by   "Exception"  class.  Which is superclass of all other exception.
         if we defined as the first catch block of Exception type, the no other catch  block will be executed.
          
            General Syntax 
                  try
                     {
                         // arise various exception, an throw to the catch block
                     }
                   catch(ExceptionType1  obj)
                    {
                       // take appropriate action.
                    }
                 catch(ExceptionType2  obj)
                    {
                    }
                catch(ExceptionType3  obj)
                    {
                    }
                    .
                    .
                    .
                catch(ExceptionType N  obj)
                    {
                    }       
 // WAP to use multiple catch block....
    class try3
      {
         public static void main(String args[])
           {
             try
    	       {
    	 	     System.out.println(" Within try block");
    		     int a=Integer.parseInt(args[0]);
    			 int b=Integer.parseInt(args[1]);
    			    int c=a/b;
    			 System.out.println(" Ans is-->"+a+"/"+b+" ="+(a/b));
    			 System.out.println(" this statement execute if there is no error");
    		   }
             catch(ArrayIndexOutOfBoundsException obj)
               {
      		    System.out.println(" out of array bounds value read kartay.."+obj);
    		    }
    	       catch(ArithmeticException obj)
                {
    	 	     System.out.println(" Number Divided by zero.."+obj);
    		    }
                 catch(NullPointerException obj)
    	         {
    		       System.out.println(" Value pathavali milat nasel.."+obj);
    	         }
    	        catch(Exception e)
    	         {
    			   System.out.println(" Common msg deyacha asel sarv exception la.. ja ghari"+e);
    			 }
    	      System.out.println(" Ethun pudhe remaining code execute karel ");
           }
  }
 01-10-2020   
 **** Declaring Exception ****   
      Checked Exception follow the handle-or-declare rule. This mean that checked should exception
      either be handled by the programmmer or if it not possible to handle it, then declare that the method by
      using   'throws'  keyword. 
      
        void methodname(args) throws Exception1,Exception2,Exception3...
          {
             //method body
          }
          
    void accept() throws IOException
      {
         // method body  
           br.readLine()
      }
      
       If programmer donot want to define try/catch block and declare exception outside method
        then use 'throws' keywords.
    
   **** Throwing and rethrowing an Exception**** 
     When an exception occurs, the java runtime system creates an exception object and throws the object.
      however, it is possible to explicitly throw an exception object using the 'throw' keyword.
              Syntax         throw exceptionobj;
              
       //WAP to demonstrate of throwing Exception
          class sample
            {
                static void demo()
                 {
                     try
                      {
                        throw new ArithmeticException();
                       }
                     catch(ArithmeticException obj)
                      {
                        System.out.println(" Catch the exception,  and punha throw kela mean rethrow");
                         throw obj;
                      }
                 }
           }
         class try4
          {
             public static void main(String args[])
              {
				  try
				       {
				          sample.demo();
				       }
				  catch(ArithmeticException a)
				        {
				           System.out.println(" punha main catch madhye return throw kela"+a);
                      }
              }
          }

***** Nested try-catch block ***
      One try-catch block define in another try-catch block is called nested try-catch block.
        
           try
             {
                  ---------
                     try
                     {
                          //code
                      }
                    catch(Exceptiontype obj)
                     { 
                        //handle exception
                     }
              }
              catch(Exception type obj)
               {  
                   //outer catch block
               }
    Execution start from outer try block, then enter in inner try block. if inner try block throw exception
     then first match with inner catch block, if it match then that block execute. otherwise match with
     outer catch block, if it is match then execute. if no catch is match then JVM will handle that exception.
     
        //WAP to use of nested try-catch block.
          class trynested
	    {
	         public static void main(String args[])
	          {
	                try
	                  {
	                    System.out.println(" Outer try block ");
	                      int a=Integer.parseInt(args[0]);
	                      int b=Integer.parseInt(args[1]);
	                        try
	                         {
	                           System.out.println(" Inner try block ");
	                              int c=a/b;
	                          System.out.println(" \n Division "+a+"/"+b+" ="+c);
	                          }
	                         catch(ArithmeticException e)
	                          {
	                              System.out.println(" Number divided by zero... kalatey ka? -->"+p);
	                          }
	                    }
	                     catch(NumberFormatException p)
	                     {
	                       System.out.println("Outer catch block");
	                       System.out.println(" pls enter correct input datatype "+e);
	                     }
	              System.out.println(" Normal Exception ");
	          }
    }
       04-10-2020
        Creating User-Defined Exception.
          The Java API  provides several Exception classes which are adquate for most purposes. however, In some cases, we may
          encounter a situation which cannot described by standard exceptiontype. For such cases we may need to define our own exception type.
             A user define exception class must be extend from Exception.
             Syntax 
                   class userdefinename extends Exception
                    {
                       // body of user define exception.
                    }
      ============================================================================================
          //WAP accept Date by using command line arguments. if it valid date the display date, and if it is invalid then display 
          exception. like invalid date, invalid month, invalid year, invalid parameter etc.
class invalidpara extends Exception
  {
	    invalidpara()
	     {
			  System.out.println("Plz enter the correct input parameter in dd-mm-yy");
		 }
  }
class invalidyear extends Exception
  {
	    invalidyear()
	     {
			  System.out.println("Plz enter the correct year");
		 }
  }
class invalidmonth extends Exception
  {
	    invalidmonth()
	     {
			  System.out.println("Plz enter the correct month ");
		 }
  }
class invaliddate extends Exception
  {
	    invaliddate()
	     {
			  System.out.println("Plz enter the correct Date ");
		 }
  }
class userdefine
  {
     public  static void main(String args[])
       {
               try
                {
					  if(args.length!=3)
					    throw new invalidpara();
					  else
					    {
                              int d=Integer.parseInt(args[0]);
							  int m=Integer.parseInt(args[1]);
							  int y=Integer.parseInt(args[2]);
							    if(y < 0 || y >2020)
							       throw new invalidyear();
							    else
							      {
							            if(m<1 || m>12)
							             throw new invalidmonth();
							            else
							             {
											  switch(m)
											  {
												   case 4 : case 6 :
												   case 9: case 11 :  if(d <1 || d>30)
												                                   throw new invaliddate();
												                                  else
												                                    System.out.println("Date is valid ");
												                                   break;
												   case 1 : case 3 : case 5 :case 10 :
												   case 7: case 8 :  case 12: if(d <1 || d>31)
												                                               throw new invaliddate();
												                                          else
												                                             System.out.println("Date is valid ");
												                                        break;
												   case 2  :  if(y%4==0)
												                      {
																		  if(d <1 || d>29)
																		     throw new invaliddate();
																		    else
															                  System.out.println("Date is valid ");
												                       }
											                       else
											                         {
																		  if(d <1 || d>28)
																  	         throw new invaliddate();
																	    else
															                  System.out.println("Date is valid ");
																	 }
										                     break;
										   	     }
									     }
						          }
						}
				}
			  catch(Exception e)
			    {
					// System.out.println("\n Daya Kuch to Gadbad hai"+e);
				}
       }
  }

  ================================================================================================
  ***  Assertions ***
     Assertions are used for debugging purposes. An assertion is a statement containing a boolean expression that is assumed
     to be a true when the statement is executed.    The System. reports an AssertionError if expression evaluates to false.
       
        Syntax        assert( a>0 ) // throw an Assertion Error  if  a<=0
 
        The assertion facility uses the exception handling machanism to propagate the error. 
        The assertion facility can be enabled or disabled at runtime.
         
           Syntax        assert   expression1;
                               assert   expression1  :  expression2;
                               
          Expression1 should always result in boolean value. 
          Expression2 can be anything that results in a value. The value is used to generate a String message  that display debugging information.
          
          The java.lang.AssertionError class is subclass of java.lang.Error.  This make AssertionException unchecked.
          

          
    class assertdemo
     {
        public static void main(String args[])
          {
             int a=Integer.parseInt(args[0]);
    
               assert(a>0)  :  " a is negative.. pls enter positive value only  ha msg jyaweli condition false hoeal tevha run hoeal";
    
               System.out.println(" Normal execution a="+a);
          }
   }
    
    
execute program:              javac asserdemo.java
                              java -enableassertion  value  
    
    
    
    
    
    
    
    
  
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
            
          
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
    
    
    
    
    
    
    
    
    
    
    
    
  
    
    
    
    
                 
    
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     